input {
  tcp {
    port => 5000
    type => syslog
  }
  udp {
    port => 5000
    type => syslog
  }
}

output {
  elasticsearch { host => "elasticsearch" }
}

filter {
  if [type] == "syslog" {

# FIRST PARSING CUT -----------------------------------------------------------------------------------------------
  #################################################
  ### haproxy logs via syslog
  #################################################
  #  <141>Sep 23 12:47:33 haproxy[1]: Proxy https-in started.

  if [message] =~ "<\d+>\w+\s+\d+\s+\d+:\d+:\d+\s+\w+\[\d+\]: .*$" {
      grok {
        match => { "message" => "%{SYSLOG5424PRI}%{CISCOTIMESTAMP} +(?:%{HOSTNAME:container_src}|-)\[\d\]: +%{GREEDYDATA:container_msg}" }
      }
  }

  #################################################
  ### Container logs via docker log-driver
  #################################################
  # <27>2015-09-22T15:27:13Z vagrant-ubuntu-trusty-64 docker/20a591ad5b12[702]: Sep 22, 2015 3:27:13 PM org.elasticsearch.node.internal.InternalNode start

  else {
    grok {
      match => { "message" => "%{SYSLOG5424PRI}+(?:%{TIMESTAMP_ISO8601:syslog_time}|-) +(?:%{HOSTNAME:container_host}|-) +(\w+/%{NOTSPACE:container_src}\[\d+\]): +%{GREEDYDATA:container_msg}" }
    }
    date {
      match => [ "syslog_time", "YYYY-MM-dd'T'HH:mm:ssZ" ]
      #target => "@timestamp"
      #locale => "en"
      #timezone => "UTC"
    }
  }


# SECOND PARSING CUT ------------------------------------------------------------------------------------------------

  ############################################
  ### HaProxy log
  ############################################
  # <134>Sep 27 01:20:32 haproxy[1]: 172.17.42.1:46563 [26/Sep/2015:21:43:31.697] https-in/1: SSL handshake failure
  # http://www.haproxy.org/download/1.4/doc/configuration.txt

  if [container_msg] =~ "^(?:[0-9]{1,3}\.){3}[0-9]{1,3}:\d+ \[\S+\] \S+\s+\w+\/\w+.*" {
    grok {
      match => { "container_msg" => "%{IP:client_ip}:%{POSINT:client_port:int} %{SYSLOG5424SD:accept_date} %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:tq:int}\/%{INT:tw:int}/%{INT:tc:int}/%{INT:tr:int}/%{INT:tt:int} %{INT:response:int} %{INT:bytes_read:int} %{NOTSPACE:captured_request_cookie} %{NOTSPACE:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn:int}/%{INT:feconn:int}/%{INT:beconn:int}/%{INT:srv_conn:int}/%{INT:retries:int} %{INT:srv_queue:int}/%{INT:backend_queue:int} %{QUOTEDSTRING:http_request}" }
    }
    mutate {
      replace => [ "@source", "haproxy" ]
    }
  }

  ############################################
  ### Web logs
  ############################################
  # <14>2015-07-20T17:19:16Z 456fe9ffba31 logging_logstash_1[1]: 56.42.42.42 - - [24/Aug/2015:12:11:36 +0000] "GET /api/doc/schema/currency?Authorization=ApiKey%20userame:apikey HTTP/1.1" 301 5 "http://preprod:8000/api/doc/" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0"

  if [container_msg] =~ "[?:[0-9]{1,3}\.){3}[0-9]{1,3}|-] [?:[0-9]{1,3}\.){3}[0-9]{1,3}|-] (\w+|-) \[.*\].*$" {

    grok {
      match => { "container_msg" => "%{COMBINEDAPACHELOG}( %{QS:gzip_ratio}|)" }
    }

    geoip { source => "clientip" }
    useragent { source => agent }

    mutate {
      replace => [ "@source", "web" ]
      rename => [ "timestamp" , "web_time" ]
      convert => [ "response", "integer" ]
      convert => [ "bytes", "integer" ]

      # for useragent:
      rename => [ "name" , "browser_name" ]
      rename => [ "major" , "browser_maj" ]
      rename => [ "minor" , "browser_min" ]
      convert => [ "browser_maj", "integer" ]
      convert => [ "browser_min", "integer" ]
    }
  }

### END Copy/paste ######################################

  } # END Loop if [type] == "syslog" {
} #END filter
